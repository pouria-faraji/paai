---
version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - mongo_default
      - default
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.3.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    command:
      - /bin/bash
      - -c
      - |
        echo "Waiting for zookeeper to be ready"
        until cub zk-ready zookeeper:2181 20 &> /dev/null; do echo "Zookeper not ready. Try again.."; sleep 5; done
        echo "Zookeper ready"
        
        /etc/confluent/docker/run
    ports:
      - "9092:9092"
      - "9101:9101"
    networks:
      - mongo_default
      - default
    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      # - schema-registry
    command:
      - /bin/bash
      - -c
      - |
        echo "Waiting for kafka to be ready"
        until cub kafka-ready 1 10 -b broker:29092 &> /dev/null; do echo "Kafka not ready. Try again.."; sleep 5; done
        echo "Kafka ready"
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.6.0
        confluent-hub install --no-prompt confluentinc/connect-transforms:1.4.0
        confluent-hub install --no-prompt redhatinsights/expandjsonsmt:0.0.7
        /etc/confluent/docker/run
    ports:
      - "8083:8083"
    networks:
      - mongo_default
      - default
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.2.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - connect
    command:
      - /bin/bash
      - -c
      - |
        echo "Waiting for kafka to be ready"
        until cub kafka-ready 1 10 -b broker:29092 &> /dev/null; do echo "Kafka not ready. Try again.."; sleep 5; done
        echo "Kafka ready"
        echo "Waiting for connect to be ready"
        until cub connect-ready connect 8083 10 &> /dev/null; do echo "Connect not ready. Try again.."; sleep 5; done
        echo "Connect ready"
        /etc/confluent/docker/run
    ports:
      - "9021:9021"
    networks:
      - mongo_default
      - default
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-operator:
    image: confluentinc/cp-server:7.3.2
    container_name: kafka-operator
    command:
      - /bin/bash
      - -c
      - |
        echo "Waiting for kafka to be ready"
        until cub kafka-ready 1 10 -b broker:29092 &> /dev/null; do echo "Kafka not ready. Try again.."; sleep 5; done
        echo "Kafka ready"
        echo "Creating topics..."
        kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic processed_messages --partitions 3
        echo "Waiting for connect to be ready"
        until cub connect-ready connect 8083 10 &> /dev/null; do echo "Connect not ready. Try again.."; sleep 5; done
        echo "Connect ready"
        echo "Downloading connect-cli tool"
        wget https://github.com/lensesio/kafka-connect-tools/releases/download/v1.0.6/connect-cli
        chmod +x connect-cli
        echo "Installing mongo_sink connector"
        pwd
        ./connect-cli create mongodb_sink_processed_messages -e http://connect:8083 < /mongodb_sink.properties
        echo "Done"
    networks:
      - mongo_default
      - default
    depends_on:
      - broker
    volumes:
      - ./mongodb_sink.properties:/mongodb_sink.properties
    restart: "no"
    deploy:
      restart_policy:
        condition: none

networks:
  default:
  mongo_default:
    external: true